# vim: syntax=sql
[auto_discovery_60]
minutes: 60
dgrp.lld: select name "{#DGRP}" from v$asm_diskgroup
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)
parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'

[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from v$instance
[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance

[checks_05m]
minutes: 5
dgrp.used:  select 'dgrp['||name||',filesize]' key, total_mb value from v$asm_diskgroup
            union all
            select 'dgrp['||name||',usedbytes]' key, total_mb - free_mb value from v$asm_diskgroup
            union all
            select 'dgrp['||name||',pctfree]' key, (free_mb/total_mb)*100 value from v$asm_diskgroup
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
[checks_60m]
minutes: 60
alertlog: select 'inst['||i.instance_name||',log]', d.value||'/alert_'||i.instance_name||'.log' from gv$instance i, gv$diag_info d
           where i.inst_id = d.inst_id and d.name = 'Diag Trace'
