# vim: syntax=sql
[auto_discovery_1000]
minutes: 1000
expu.lld: select decode (s.con_id,0, d.name, 1,'ROOT',p.name) "{#PDB}", username "{#USERNAME}"
            from cdb_users s
            , v$pdbs p
            , v$database d
            where p.con_id(+) = s.con_id
            and account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
            and expiry_date > sysdate
            and expiry_date < (sysdate + 30)
ustat.lld: select decode (s.con_id,0, d.name, 1,'ROOT',p.name) "{#PDB}", account_status "{#STATUS}"
             from (select con_id, account_status, count(*) cnt from cdb_users group by con_id, account_status ) s
               , v$pdbs p
               , v$database d
            where s.con_id = p.con_id(+)

[auto_discovery_60]
minutes: 60
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)

db.lld: select name "{#PDB}" from v$pdbs union select name from v$database where cdb = 'NO'

parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
p_ts.lld: select decode (s.con_id,0, d.name, 1,'ROOT',p.name) "{#PDB}", tablespace_name "{#TS_NAME}"
            from cdb_tablespaces s
          , v$pdbs p
          , v$database d
          where p.con_id(+) = s.con_id            
          and contents = 'PERMANENT'

t_ts.lld: select decode (s.con_id,0, d.name, 1,'ROOT',p.name) "{#PDB}", tablespace_name "{#TS_NAME}"
            from cdb_tablespaces s
          , v$pdbs p
          , v$database d
          where p.con_id(+) = s.con_id            
          and contents = 'TEMPORARY'

u_ts.lld: select decode (s.con_id,0, d.name, 1,'ROOT',p.name) "{#PDB}", tablespace_name "{#TS_NAME}"
            from cdb_tablespaces s
          , v$pdbs p
          , v$database d
          where p.con_id(+) = s.con_id            
          and contents = 'UNDO'

service.lld: select decode(s.pdb,'CDB$ROOT','ROOT',s.pdb) "{#PDB}", i.instance_name "{#INST_NAME}", s.name "{#SERVICE_NAME}"
               from gv$services s join gv$instance i
                 on (   s.inst_id = i.inst_id)

rman.lld: select distinct(object_type) "{#OBJ_TYPE}" from v$rman_status where operation like 'BACKUP%'
arl_dest.lld: select i.instance_name "{#INST_NAME}",d.dest_name "{#ARL_DEST}"
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and   db.log_mode = 'ARCHIVELOG'

invt.lld:  select 'db[total]',count(1) from dba_objects where status = 'INVALID'

[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from v$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS||':'||BUNDLE_series status
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)
[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance
db.openmode: select 'db['||name||',openstatus]', decode(open_mode,'MOUNTED',1,'READ ONLY',2,'READ WRITE',3,0)
             from (
                    select name, open_mode from v$pdbs
                     union 
                    select name, open_mode from v$database where cdb = 'NO'
                  )
scn: select 'db[current_scn]', current_scn from v$database
     union all
     select 'db[delta_scn]', current_scn from v$database
blocked: select 'blocked[topsid]', topsid||'('||blocked||')'
          from (
          select final_blocking_instance||'/'||final_blocking_session topsid, count(*) blocked
          from gv$session
          where  FINAL_BLOCKING_SESSION_STATUS='VALID'
          group by final_blocking_instance||'/'||final_blocking_session
          order by 2 desc, 1
          )
          where rownum < 2
          union all
          select 'blocked[count]', ''||count(*)
           from gv$session 
           where  FINAL_BLOCKING_SESSION_STATUS='VALID'
[checks_05m]
minutes: 5
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
service.cnt: select 'service['||decode (s.con_id,0, d.name, 1,'ROOT',pdb.name)||','||i.instance_name||','|| s.service_name||',sess]' ,count(*)
               from gv$session s join gv$instance i
                 on (   s.inst_id = i.inst_id)
                                 left join v$pdbs pdb
                 on (   s.con_id = pdb.con_id)
                     cross join v$database d
                 group by i.instance_name, s.service_name, decode (s.con_id,0, d.name, 1,'ROOT',pdb.name)

u_ts: SELECT   'u_ts['||s.con_name||','||tablespace_name||','||
           CASE
             WHEN k = 1 THEN 'filesize]'
             WHEN k = 2 THEN 'maxsize]'
             WHEN k = 3 THEN 'usedbytes]'
             WHEN k = 4 THEN 'pctfree]'
           END key
  ,        CASE
           WHEN k = 1 THEN file_size
           WHEN k = 2 THEN file_max_size
           WHEN k = 3 THEN file_size - file_free_space
           WHEN k = 4 THEN ROUND(file_free_space / file_size * 100)
           END bytes
  FROM   ( --
         SELECT   decode (t.con_id,0, d.name, 1,'ROOT',p.name) con_name
         ,        t.tablespace_name
         ,        SUM(f.bytes) file_size
         ,        SUM(CASE
                        WHEN f.autoextensible = 'NO'
                        THEN f.bytes
                        ELSE GREATEST(f.bytes, f.maxbytes)
                      END) file_max_size
         ,        SUM(NVL(( SELECT   SUM(a.bytes)
                            FROM     cdb_free_space a
                            WHERE    a.tablespace_name = t.tablespace_name
                            and      a.con_id         = t.con_id
                            AND      a.file_id         = f.file_id
                            AND      a.relative_fno    = f.relative_fno
                          ), 0)) file_free_space
         FROM     cdb_tablespaces t
         JOIN     cdb_data_files f
         ON     ( f.tablespace_name = t.tablespace_name and f.con_id = t.con_id )
         cross join v$database d
         left join v$pdbs p on (t.con_id = p.con_id)
         WHERE    t.CONTENTS = 'UNDO'
         GROUP BY t.tablespace_name, decode (t.con_id,0, d.name, 1,'ROOT',p.name)
       ) s
  JOIN   ( SELECT LEVEL k FROM dual CONNECT BY LEVEL <= 4 ) k
  ON     ( 1 = 1 )
t_ts: 
  select   't_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.TABLESPACE||',filesize]', s.totalspace
    from (select   round (sum (d.bytes))  AS totalspace,
                   d.tablespace_name tablespace, con_id
              from cdb_temp_files d
          group by d.tablespace_name, d.con_id) s
          , v$pdbs p
         , v$database d
         where p.con_id(+) = s.con_id
   union all
  select   't_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.TABLESPACE_name||',maxsize]', maxbytes
        from (select f.con_id, f.tablespace_name, sum(maxbytes) maxbytes
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name, con_id
                from cdb_temp_files) f
            , cdb_tablespaces t
       where t.contents = 'TEMPORARY'
         and  f.tablespace_name = f.tablespace_name
       group by f.tablespace_name, f.con_id
       )s
       , v$pdbs p
         , v$database d
         where p.con_id(+) = s.con_id
  union all
  select 't_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.tablespace_name||',usedbytes]', bytes
   from ( select t.con_id, t.tablespace_name, nvl(sum(u.blocks*t.block_size),0) bytes
    from gv$sort_usage u right join
       cdb_tablespaces t
           on ( u.tablespace = t.tablespace_name)
             where   t.contents = 'TEMPORARY'
               group by t.tablespace_name, t.con_id
     )s
     , v$pdbs p
         , v$database d
         where p.con_id(+) = s.con_id
         union all
  select 't_ts['||decode (tf.con_id,0, d.name, 1,'ROOT',p.name)||','||tf.tablespace_name||',pctfree]' key, round(((tf.bytes-(nvl(tu.blocks,0)*ts.block_size))/tf.bytes)*100) value
  from 
      (
        select con_id, tablespace_name, sum(bytes) bytes, count(*) c
        from cdb_temp_files
        group by con_id, tablespace_name
      ) tf left join 
      (
        select con_id, tablespace, sum(blocks) blocks, count(*) c
        from gv$sort_usage
        group by con_id, tablespace
      ) tu
  on (   tf.con_id = tu.con_id
     and tf.tablespace_name = tu.tablespace
     )
     join cdb_tablespaces ts
  on (   tf.con_id = ts.con_id
     and tf.tablespace_name = ts.tablespace_name
     )
     left join v$pdbs p
  on (  tf.con_id = p.con_id)
     cross join v$database d
  where ts.contents = 'TEMPORARY'

arl_dest: select 'arl_dest['|| i.instance_name||','||d.dest_name||',status]', ''||decode (d.status,'VALID',0,'DEFERRED',1,'ERROR',2,3)
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',sequence]', ''||d.log_sequence
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',error]', '"'||d.error||'"'
            from gv$archive_dest d
            , gv$instance i
                , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
fra: select 'fra[limit]', space_limit from v$recovery_file_dest def
      union all
     select 'fra[used]', space_used from v$recovery_file_dest def
      union all
     select 'fra[reclaimable]', space_reclaimable from v$recovery_file_dest def
      union all
     select 'fra[files]', number_of_files from v$recovery_file_dest def
[checks_20m]
minutes: 20
rman: with stats as (
        select r.object_type, r.operation, r.start_time, r.end_time, r.status
               ,max(start_time) over (partition by  r.object_type, r.operation) max_start
               , input_bytes, output_bytes
        from v$rman_status r
        where r.row_type = 'COMMAND'
        and   not r.object_type is null
        and   r.operation like 'BACKUP%'
        )
        , types as (
        select 'ARCHIVELOG' object_type from dual
        union all
        select 'CONTROLFILE' from dual
        union all
        select 'SPFILE' from dual
        union all
        select 'DB INCR' from dual
        union all
        select 'DB FULL' from dual
        union all
        select 'RECVR AREA' from dual
        )
        , data as (
        select t.object_type, s.start_time, nvl(s.status,'noinfo') status, round(nvl((s.end_time - s.start_time),0)*24*60*60) elapsed
        , nvl(input_bytes,0) input_bytes, nvl(output_bytes,0) output_bytes
        from types t left outer join
             stats s on (s.object_type = t.object_type)
        where nvl(s.start_time,sysdate) = nvl(s.max_start,sysdate)
        )
        select '"rman[{#PDB},'||object_type||',status]"', ''||decode(status,'COMPLETED',0,
                                               'FAILED',   1,
                                               'COMPLETED WITH WARNINGS',2,
                                               'COMPLETED WITH ERRORS',  3,
                                               'noinfo',                 4,
                                               'RUNNING',                5,
                                               9) status
        from data
        union all
        select '"rman[{#PDB},'||object_type||',ela]"',''||elapsed
        from data
        union all
        select '"rman[{#PDB},'||object_type||',input]"',''||input_bytes
        from data
        union all
        select '"rman[{#PDB},'||object_type||',output]"',''||output_bytes
        from data
        union all
        select '"rman[{#PDB},'||object_type||',age]"',''||round((sysdate - nvl(start_time,sysdate))*24*3600) age
        from data
        union all
        select '"rman['||object_type||',time_start]"',''||to_char(start_time, 'YYYY-MM-DD HH24:MI:SS')
        from data
        union all
        select '"rman['||object_type||',time_end]"',''||to_char(end_time, 'YYYY-MM-DD HH24:MI:SS')
        from data
        union all select 'rman[bct,status]', ''||decode(status,'ENABLED',0,'DISABLED',1,2) from v$block_change_tracking
        union all select 'rman[bct,file]', filename from v$block_change_tracking
        union all select 'rman[bct,bytes]', ''||nvl(bytes,0) from v$block_change_tracking
archive: SELECT 'db[archive]' key,COUNT (1)  LOGS FROM V$LOG_HISTORY WHERE FIRST_TIME >= (sysdate -1/24)
processes: select 'db[processes]' key, CURRENT_UTILIZATION from v$resource_limit where resource_name = ('processes')
sessions: select 'db[sessions]' key, CURRENT_UTILIZATION from v$resource_limit where resource_name = ('sessions')
[checks_60m]
minutes: 60
p_ts: select 'p_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.tablespace_name||',filesize]' key, s.bytes
       from (
         select df.con_id, df.tablespace_name, sum(bytes) bytes
           from cdb_data_files df
           ,    cdb_tablespaces ts
          where df.tablespace_name = ts.tablespace_name
            and df.con_id = ts.con_id
            and ts.contents = 'PERMANENT'
          group by df.con_id, df.tablespace_name
             ) s
         , v$pdbs p
         , v$database d
         where p.con_id(+) = s.con_id
       union all
        select 'p_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.tablespace_name||',maxsize]' key, s.maxbytes
          from ( select t.con_id, t.tablespace_name, sum(maxbytes) maxbytes
          from 
           (select case when autoextensible = 'NO'
                                 then bytes
                       else
                        case when bytes > maxbytes
                                 then bytes
                        else          maxbytes
                        end
                       end maxbytes, tablespace_name, con_id
                  from cdb_data_files) f
              , cdb_tablespaces t
         where t.contents = 'PERMANENT'
           and  t.tablespace_name = f.tablespace_name
           and  t.con_id          = f.con_id
         group by t.tablespace_name, t.con_id
         ) s
          , v$pdbs p
          , v$database d
          where p.con_id(+) = s.con_id
       union all
        select 'p_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.tablespace_name||',usedbytes]' key,  usedbytes
      from (select t.con_id, t.tablespace_name, sum(f.bytes) - nvl(sum(a.bytes),0) usedbytes
        from (select con_id, tablespace_name, sum(bytes) bytes from cdb_data_files 
        group by con_id, tablespace_name) f
        join cdb_tablespaces t
          on ( f.tablespace_name = t.tablespace_name and f.con_id = t.con_id)
        left join (select con_id, tablespace_name, sum(bytes) bytes
        from cdb_free_space group by con_id,tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name
              and t.con_id          = a.con_id
              and f.con_id          = a.con_id
              )
        where t.contents = 'PERMANENT'
        group by t.tablespace_name, t.con_id
        )s
        , v$pdbs p
        , v$database d
        where p.con_id(+) = s.con_id
       union all
        select 'p_ts['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','||s.tablespace_name||',pctfree]' key,  pct_free
      from (select t.con_id, t.tablespace_name, round((nvl(sum(a.bytes),0) / sum(f.bytes)) * 100) pct_free
        from (select con_id, tablespace_name, SUM (bytes) bytes
              from cdb_data_files
          group by con_id, tablespace_name) f
        join cdb_tablespaces t
          on ( f.tablespace_name = t.tablespace_name and f.con_id = t.con_id)
        left join (select con_id, tablespace_name, sum(bytes) bytes
        from cdb_free_space group by con_id,tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name
              and t.con_id          = a.con_id
              and f.con_id          = a.con_id
              )
        where t.contents = 'PERMANENT'
        group by t.tablespace_name, t.con_id
        )s
        , v$pdbs p
        , v$database d
        where p.con_id(+) = s.con_id
expu: select 'expu['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','|| username||',expiring]' key, (expiry_date - sysdate)*24*3600 value
	from cdb_users s
	, v$pdbs p
	, v$database d
	where p.con_id(+) = s.con_id
	and account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
	and expiry_date > sysdate
	and expiry_date < (sysdate + 30)
  union all
  select '"ustat['||decode (s.con_id,0, d.name, 1,'ROOT',p.name)||','|| s.account_status||',count]"' key, s.cnt value
    from (select con_id, account_status, count(*) cnt from cdb_users group by con_id, account_status ) s
      , v$pdbs p
      , v$database d
      where s.con_id = p.con_id(+)
alertlog: select 'inst['||i.instance_name||',log]', d.value||'/alert_'||i.instance_name||'.log' from gv$instance i, gv$diag_info d
           where i.inst_id = d.inst_id and d.name = 'Diag Trace'
[checks_720m]
minutes: 720
version: select 'inst['||instance_name||',version]', version from gv$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)
sga_buffer_cache: SELECT 'db[sga_buffer_cache]' key,to_char(ROUND(SUM(decode(pool,NULL,decode(name,'db_block_buffers',(bytes)/(1024*1024),'buffer_cache',(bytes)/(1024*1024),0),0)),2)) sga_bufcache FROM V$SGASTAT
sga_fixed: SELECT db[sga_fixed] key,(bytes)/(1024*1024),0) sga_fixed FROM V$SGASTAT where name = 'Fixed SGA Size'
sga_java_pool: SELECT db[sga_java_pool] key,to_char(ROUND(SUM(decode(pool,'java pool',(bytes)/(1024*1024),0)),2)) sga_jpool FROM V$SGASTAT
sga_large_pool: SELECT db[sga_large_pool] key,to_char(ROUND(SUM(decode(pool,'large pool',(bytes)/(1024*1024),0)),2)) sga_lpool FROM V$SGASTAT
sga_log_buffer: SELECT db[sga_log_buffer] key,TO_CHAR(ROUND(SUM(decode(pool,NULL,decode(name,'log_buffer',(bytes)/(1024*1024),0),0)),2)) sga_lbuffer FROM V$SGASTAT
sga_shared_pool: SELECT db[sga_shared_pool] key,TO_CHAR(ROUND(SUM(decode(pool,'shared pool',decode(name,'library cache',0,'dictionary cache',0,'free memory',0,'sql area',0,(bytes)/(1024*1024)),0)),2)) pool_misc FROM V$SGASTAT

[checks_15m]
minutes: 15
invalid.user: select 'db[owner]',owner||'.'||object_name||'.'||object_type from dba_objects where status = 'INVALID'
invalid.total: select 'db[total]',count(1) from dba_objects where status = 'INVALID'
failed.jobs: select 'db[failedjobs]',job||','||schema_user||','||failures||','||substr(what,1,50) what from dba_jobs where failures>0 and broken = 'N'
failed.jobs.count: select 'db[failedjobscount]',count(1) from dba_jobs where failures>0 and broken = 'N'
broken.jobs: select 'db[brokenjobs]',broken||','||failures||','||job||','||NEXT_DATE||','||LAST_DATE||','||LOG_USER from dba_jobs where broken = 'Y'
broken.jobs.count: select 'db[brokenjobscount]',count(1) from dba_jobs where broken = 'Y'
scheduler.jobs: SELECT 'db[schldjobs]' key,JOB_NAME||','||STATE FROM DBA_SCHEDULER_JOBS where state <> 'DISABLED'
runschd.jobs: select 'db[runschldjobs]' key,OWNER||','||JOB_NAME||','||JOB_SUBNAME||','||JOB_STYLE||','||ELAPSED_TIME FROM ALL_SCHEDULER_RUNNING_JOBS
expiring_users: select 'db[expiringusers] key,USERNAME||','||ACCOUNT_STATUS||','||EXPIRY_DATE from dba_users where expiry_date between sysdate and sysdate+30
runschd.jobs: select 'db[runschldjobs]' key,OWNER||','||JOB_NAME||','||JOB_SUBNAME||','||JOB_STYLE||','||ELAPSED_TIME FROM ALL_SCHEDULER_RUNNING_JOBS
