g vim: syntax=sql
[auto_discovery_1000]
minutes: 1000
expu.lld: select '' "{#PDB}", username "{#USERNAME}"
            from dba_users s
            where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
            and expiry_date > sysdate
            and expiry_date < (sysdate + 30)
ustat.lld: select '' "{#PDB}", account_status "{#STATUS}"
            from dba_users
            group by account_status
[auto_discovery_60]
minutes: 60
inst.lld: select distinct inst_name "{#INST_NAME}"
            from (select inst_name from v$active_instances 
                  union
                  select instance_name from gv$instance)
db.lld: select name "{#PDB}" from v$database
parm.lld: select i.instance_name "{#INST_NAME}", p.name "{#PARAMETER}"
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
p_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'PERMANENT'
t_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'TEMPORARY'
u_ts.lld: select tablespace_name "{#TS_NAME}", '' "{#PDB}"
            from dba_tablespaces where contents = 'UNDO'
service.lld: select '' "{#PDB}", i.instance_name "{#INST_NAME}", s.name "{#SERVICE_NAME}"
               from gv$services s join gv$instance i
                 on (   s.inst_id = i.inst_id)
rman.lld: select distinct(object_type) "{#OBJ_TYPE}" from v$rman_status where operation like 'BACKUP%'
rman_testbrian.lld: select '' "{#PDB}", distinct(object_type) "{#OBJ_TYPE}" from v$rman_status where operation like 'BACKUP%'
arl_dest.lld: select i.instance_name "{#INST_NAME}",d.dest_name "{#ARL_DEST}"
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and   db.log_mode = 'ARCHIVELOG'
[startup]
minutes: 0
version: select 'inst['||instance_name||',version]', version from gv$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)

[checks_01m]
minutes: 1
inst.uptime: select 'inst['||instance_name||',uptime]' key,(sysdate -startup_time)*60*60*24 val from gv$instance
db.openmode: select 'db['||name||',openstatus]', decode(open_mode,'MOUNTED',1,'READ ONLY',2,'READ WRITE',3,0) from v$database
scn: select 'db[current_scn]', current_scn from v$database
     union all
     select 'db[delta_scn]', current_scn from v$database
blocked: select 'blocked[topsid]', topsid||'('||blocked||')'
          from (
          select final_blocking_instance||'/'||final_blocking_session topsid, count(*) blocked
          from gv$session
          where  FINAL_BLOCKING_SESSION_STATUS='VALID'
          group by final_blocking_instance||'/'||final_blocking_session
          order by 2 desc, 1
          )
          where rownum < 2
          union all
          select 'blocked[count]', ''||count(*)
           from gv$session 
           where  FINAL_BLOCKING_SESSION_STATUS='VALID'
[checks_05m]
minutes: 5
parm.val:  select 'parm['||i.instance_name||','||p.name||',value]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) not like '%SIZE%'
            union all
            select 'parm['||i.instance_name||','||p.name||',size]' key, p.value
            from gv$instance i, gv$parameter p
            where i.instance_number = p.inst_id
            and   p.type in (3,6) and p.isdefault = 'FALSE'
            and   upper(p.description) like '%SIZE%'
service.cnt: select 'service[,'||i.instance_name||','|| s.service_name||',sess]' ,count(*)
               from gv$session s join gv$instance i
                 on (   s.inst_id = i.inst_id)
                 group by i.instance_name, s.service_name

u_ts: SELECT   'u_ts[,'||tablespace_name||','||
           CASE
             WHEN k = 1 THEN 'filesize]'
             WHEN k = 2 THEN 'maxsize]'
             WHEN k = 3 THEN 'usedbytes]'
             WHEN k = 4 THEN 'pctfree]'
           END key
  ,        CASE
           WHEN k = 1 THEN file_size
           WHEN k = 2 THEN file_max_size
           WHEN k = 3 THEN file_size - file_free_space
           WHEN k = 4 THEN ROUND(file_free_space / file_size * 100)
           END value
  FROM   ( --
         SELECT   t.tablespace_name
         ,        SUM(f.bytes) file_size
         ,        SUM(CASE
                        WHEN f.autoextensible = 'NO'
                        THEN f.bytes
                        ELSE GREATEST(f.bytes, f.maxbytes)
                      END) file_max_size
         ,        SUM(NVL(( SELECT   SUM(a.bytes)
                            FROM     dba_free_space a
                            WHERE    a.tablespace_name = t.tablespace_name
                            AND      a.file_id         = f.file_id
                            AND      a.relative_fno    = f.relative_fno
                          ), 0)) file_free_space
         FROM     dba_tablespaces t
         JOIN     dba_data_files f
         ON     ( f.tablespace_name = t.tablespace_name )
         WHERE    t.CONTENTS = 'UNDO'
         GROUP BY t.tablespace_name
       )
  JOIN   ( SELECT LEVEL k FROM dual CONNECT BY LEVEL <= 4 ) k
  ON     ( 1 = 1 )

t_ts: select   't_ts[,'||t.TABLESPACE||',filesize]', t.totalspace
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
									 d.tablespace_name tablespace
              from dba_temp_files d
          group by d.tablespace_name) t
   union all
   select   't_ts[,'||t.TABLESPACE_name||',maxsize]', sum(maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_temp_files) f
            , dba_tablespaces t
       where t.contents = 'TEMPORARY'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
  union all
  select 't_ts[,'||t.tablespace_name||',usedbytes]', nvl(sum(u.blocks*t.block_size),0) bytes
    from gv$sort_usage u right join
       dba_tablespaces t
           on ( u.tablespace = t.tablespace_name)
             where   t.contents = 'TEMPORARY'
               group by t.tablespace_name
  union all
  select   't_ts[,'||t.TABLESPACE_name||',pctfree]', round(((t.totalspace - nvl(u.usedbytes,0))/t.totalspace)*100) "PCTFREE"
    from (select   round (sum (d.bytes))  AS totalspace,
                   round (sum ( case when maxbytes < bytes then bytes else maxbytes end)) max_bytes,
                   d.tablespace_name
              from dba_temp_files d
          group by d.tablespace_name) t
      left join (
                        select u.tablespace tablespace_name, round(sum(u.blocks*t.block_size)) usedbytes
                        from gv$sort_usage u
                        , dba_tablespaces t
                        where u.tablespace = t.tablespace_name
                        and   t.contents = 'TEMPORARY'
                        group by tablespace
                 )u
           on t.tablespace_name = u.tablespace_name
arl_dest: select 'arl_dest['|| i.instance_name||','||d.dest_name||',status]', ''||decode (d.status,'VALID',0,'DEFERRED',1,'ERROR',2,3)
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',sequence]', ''||d.log_sequence
            from gv$archive_dest d
            , gv$instance i
            , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
          union all
          select 'arl_dest['|| i.instance_name||','||d.dest_name||',error]', '"'||d.error||'"'
            from gv$archive_dest d
            , gv$instance i
                , v$database db
            where d.status != 'INACTIVE'
            and   d.inst_id = i.inst_id
            and db.log_mode = 'ARCHIVELOG'
fra: select 'fra[limit]', space_limit from v$recovery_file_dest def
      union all
     select 'fra[used]', space_used from v$recovery_file_dest def
      union all
     select 'fra[reclaimable]', space_reclaimable from v$recovery_file_dest def
      union all
     select 'fra[files]', number_of_files from v$recovery_file_dest def

[check_60m]
tbl_report: select a.tablespace_name||','|| 
	round(SUM(a.bytes)/1024/1024,2)||','|| 
	trunc(SUM(decode(b.maxextend, null, A.BYTES/1024/1024, b.maxextend*8192/1024/1024)),2)||','||
	round((SUM(a.bytes)/1024/1024 - round(c.free/1024/1024)))||','|| 
	(SUM(decode(b.maxextend, null, A.BYTES/1024/1024, b.maxextend*8192/1024/1024)) - (SUM(a.bytes)/1024/1024 - round(c.free/1024/1024)))||','|| 
	round(100*(SUM(a.bytes)/1024/1024 - round(c.free/1024/1024))/(SUM(decode(b.maxextend, null, A.BYTES/1024/1024, b.maxextend*8192/1024/1024))))||';' 
	from 
	dba_data_files a, 
	sys.filext$ b, 
	(SELECT d.tablespace_name , sum(nvl(c.bytes,0)) free FROM dba_tablespaces d,DBA_FREE_SPACE c where d.tablespace_name = c.tablespace_name(+) group by d.tablespace_name) c
	where a.file_id = b.file#(+) 
	and a.tablespace_name = c.tablespace_name 
	GROUP by a.tablespace_name, c.free/1024 
	order by round(100*(SUM(a.bytes)/1024/1024 - round(c.free/1024/1024))/(SUM(decode(b.maxextend, null, A.BYTES/1024/1024, b.maxextend*8192/1024/1024)))) desc

[checks_15m]
minutes: 15
invalid.total: select 'db[total]',count(1) from dba_objects where status = 'INVALID'
invalid.user: select 'db[owner]',object_owner||','||object_name from dba_objects where status = 'INVALID'

[checks_20m]
minutes: 20
rman: with stats as (
        select r.object_type, r.operation, r.start_time, r.end_time, r.status
               ,max(start_time) over (partition by  r.object_type, r.operation) max_start
               , input_bytes, output_bytes
        from v$rman_status r
        where r.row_type = 'COMMAND'
        and   not r.object_type is null
        and   r.operation like 'BACKUP%'
        )
        , types as (
        select 'ARCHIVELOG' object_type from dual
        union all
        select 'CONTROLFILE' from dual
        union all
        select 'SPFILE' from dual
        union all
        select 'DB INCR' from dual
        union all
        select 'DB FULL' from dual
        union all
        select 'RECVR AREA' from dual
        )
        , data as (
        select t.object_type, s.start_time, nvl(s.status,'noinfo') status, round(nvl((s.end_time - s.start_time),0)*24*60*60) elapsed
        , nvl(input_bytes,0) input_bytes, nvl(output_bytes,0) output_bytes
        from types t left outer join
             stats s on (s.object_type = t.object_type)
        where nvl(s.start_time,sysdate) = nvl(s.max_start,sysdate)
        )
        select '"rman['||object_type||',status]"', ''||decode(status,'COMPLETED',0,
                                               'FAILED',   1,
                                               'COMPLETED WITH WARNINGS',2,
                                               'COMPLETED WITH ERRORS',  3,
                                               'noinfo',                 4,
                                               'RUNNING',                5,
                                               9) status
        from data
        union all
        select '"rman['||object_type||',ela]"',''||elapsed
        from data
        union all
        select '"rman['||object_type||',input]"',''||input_bytes
        from data
        union all
        select '"rman['||object_type||',output]"',''||output_bytes
        from data
        union all
        select '"rman['||object_type||',age]"',''||round((sysdate - nvl(start_time,sysdate))*24*3600) age
        from data
        union all select 'rman[bct,status]', ''||decode(status,'ENABLED',0,'DISABLED',1,2) from v$block_change_tracking
        union all select 'rman[bct,file]', filename from v$block_change_tracking
        union all select 'rman[bct,bytes]', ''||nvl(bytes,0) from v$block_change_tracking
		
rman_testbrian: with stats as (
				select r.object_type, r.operation, r.start_time, r.end_time, r.status
					   ,max(start_time) over (partition by  r.object_type, r.operation) max_start
					   , input_bytes, output_bytes
				from v$rman_status r
				where r.row_type = 'COMMAND'
				and   not r.object_type is null
				and   r.operation like 'BACKUP%'
				)
				, types as (
				select 'ARCHIVELOG' object_type from dual
				union all
				select 'CONTROLFILE' from dual
				union all
				select 'SPFILE' from dual
				union all
				select 'DB INCR' from dual
				union all
				select 'DB FULL' from dual
				union all
				select 'RECVR AREA' from dual
				)
				, data as (
				select t.object_type, s.start_time, nvl(s.status,'noinfo') status, round(nvl((s.end_time - s.start_time),0)*24*60*60) elapsed
				, nvl(input_bytes,0) input_bytes, nvl(output_bytes,0) output_bytes, i.inst_name
				from types t left outer join
					 stats s on (s.object_type = t.object_type),
					 (select inst_name from v$active_instances 
						  union
						  select instance_name from gv$instance) i
				where nvl(s.start_time,sysdate) = nvl(s.max_start,sysdate)
				)
				select '"rman_testbrian['||inst_name||','||object_type||',status]"', ''||decode(status,'COMPLETED',0,
													   'FAILED',   1,
													   'COMPLETED WITH WARNINGS',2,
													   'COMPLETED WITH ERRORS',  3,
													   'noinfo',                 4,
													   'RUNNING',                5,
													   9) status
				from data
				union all
				select '"rman_testbrian['||inst_name||','||object_type||',ela]"',''||elapsed
				from data
				union all
				select '"rman_testbrian['||inst_name||','||object_type||',input]"',''||input_bytes
				from data
				union all
				select '"rman_testbrian['||inst_name||','||object_type||',output]"',''||output_bytes
				from data
				union all
				select '"rman_testbrian['||inst_name||','||object_type||',age]"',''||round((sysdate - nvl(start_time,sysdate))*24*3600) age
				from data
				union all select 'rman_testbrian['||i.inst_name||',bct,status]', ''||decode(status,'ENABLED',0,'DISABLED',1,2) 
				from v$block_change_tracking, (select inst_name from v$active_instances union select instance_name from gv$instance) i
				union all select 'rman_testbrian['||i.inst_name||',bct,file]', filename 
				from v$block_change_tracking, (select inst_name from v$active_instances union select instance_name from gv$instance) i
				union all select 'rman_testbrian['||i.inst_name||',bct,bytes]', ''||nvl(bytes,0) 
				from v$block_change_tracking, (select inst_name from v$active_instances union select instance_name from gv$instance) i
[checks_5m]
minutes: 5
p_ts: select 'p_ts[,'||t.tablespace_name||',filesize]' key, sum(f.bytes)
        from dba_data_files f, dba_tablespaces t
       where t.contents = 'PERMANENT'
         and t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'p_ts[,'||t.tablespace_name||',maxsize]' key, sum(f.maxbytes)
        from (select case when autoextensible = 'NO'
                               then bytes
                     else
                      case when bytes > maxbytes
                               then bytes
                      else          maxbytes
                      end
                     end maxbytes, tablespace_name
                from dba_data_files) f
            , dba_tablespaces t
       where t.contents = 'PERMANENT'
         and  t.tablespace_name = f.tablespace_name
       group by t.tablespace_name
       union all
       select 'p_ts[,'||t.tablespace_name||',usedbytes]' key, sum(f.file_size) - nvl(sum(a.free_bytes),0) usedbytes
       from ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) free_bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'PERMANENT'
        group by t.tablespace_name
       union all
	 select 'p_ts[,'||t.tablespace_name||',pctfree]' key, round((nvl(sum(a.bytes),0) / sum(f.file_size)) * 100)
	 from
           ( select tablespace_name, sum(bytes) file_size
               from dba_data_files
               group by tablespace_name
            ) f
        join dba_tablespaces t
          on ( f.tablespace_name = t.tablespace_name)
        left join (select tablespace_name, sum(bytes) bytes
        from dba_free_space group by tablespace_name) a
          on (    t.tablespace_name = a.tablespace_name
              and f.tablespace_name = a.tablespace_name)
        where t.contents = 'PERMANENT'
        group by t.tablespace_name

expu: select 'expu[,'|| username||',expiring]' key, (expiry_date - sysdate)*24*3600 value
	from dba_users s
	where account_status IN ( 'OPEN', 'EXPIRED(GRACE)' )
	and expiry_date > sysdate
	and expiry_date < (sysdate + 30)
  union all
  select '"ustat[,'||account_status||',count]"' key, count(*) value
  from dba_users
  group by account_status
alertlog: select 'inst['||i.instance_name||',log]', d.value||'/alert_'||i.instance_name||'.log' from gv$instance i, gv$diag_info d
           where i.inst_id = d.inst_id and d.name = 'Diag Trace'
[checks_720m]
minutes: 720
version: select 'inst['||instance_name||',version]', version from gv$instance
lastpatch: select  'db[last_patch_hist]', ACTION||':'||NAMESPACE||':'||VERSION||':'||ID||':'||COMMENTS
        from sys.registry$history
        where action_time = (select max(action_time) from sys.registry$history)

